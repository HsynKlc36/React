const app = require("express")();
const http = require("http").createServer(app);
const io = require("socket.io")(http);
const cors = require("cors");
//express UygulamasÄ± OluÅŸturuluyor: express ile bir HTTP sunucusu oluÅŸturuluyor. Bu sunucu daha sonra Socket.io ile birleÅŸtirilecek.
app.use(cors());
//CORS AyarlarÄ±: app.use(cors()) kodu ile CORS (Cross-Origin Resource Sharing) ayarlarÄ± uygulanÄ±yor. Bu, farklÄ± kÃ¶kenlere (origin) sahip istemcilerin sunucuya eriÅŸimini kontrol eder.

app.get("/", (req, res) => {
	res.send("hello");
});
//KÃ¶k Yolu Ä°steÄŸi: app.get("/", ...) kodu ile kÃ¶k yolu (root path) iÃ§in bir HTTP GET isteÄŸi ele alÄ±nÄ±yor. Bu isteÄŸe karÅŸÄ±lÄ±k olarak "hello" yanÄ±tÄ± dÃ¶ndÃ¼rÃ¼lÃ¼yor. Bu adÄ±m, sunucunun temel Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ± gÃ¶stermek iÃ§in kullanÄ±labilecek basit bir iÅŸlemdir.

let lastColor = "#282c34";

io.on("connection", (socket) => {
	console.log("bir kullanÄ±cÄ± baÄŸlandÄ±!");

	socket.emit("receive", lastColor);

	socket.on("newColor", (color) => {
		console.log(color);

		lastColor = color;
		io.emit("receive", color);
	});

	socket.on("disconnect", () => {
		console.log("Bir kullanÄ±cÄ± ayrÄ±ldÄ±.");
	});
});
//io.on("connection", ...) kodu ile yeni bir Socket.io baÄŸlantÄ±sÄ± kurulduÄŸunda Ã§alÄ±ÅŸacak kod bloÄŸu tanÄ±mlanÄ±yor. Yeni bir kullanÄ±cÄ± baÄŸlandÄ±ÄŸÄ±nda "bir kullanÄ±cÄ± baÄŸlandÄ±!" mesajÄ± yazdÄ±rÄ±lÄ±yor.
//socket.emit("receive", lastColor);: Yeni bir baÄŸlantÄ± kurulduÄŸunda, son kullanÄ±lan renk bilgisini bu baÄŸlantÄ±ya gÃ¶nderiliyor.
//socket.on("newColor", ...: "newColor" adlÄ± bir olayÄ± dinliyor. Ä°stemciden gelen "newColor" olayÄ±nda Ã§alÄ±ÅŸacak kod bloÄŸu. Yani istemci, "newColor" olayÄ±nÄ± tetiklediÄŸinde (Ã¶rneÄŸin, yeni bir renk seÃ§ildiÄŸinde), bu olayÄ± dinleyen sunucu tarafÄ±ndaki kod Ã§alÄ±ÅŸacak.
//lastColor = color;: Gelen renk bilgisi "color" deÄŸiÅŸkenine atanÄ±yor, bÃ¶ylece son kullanÄ±lan renk gÃ¼ncelleniyor.
//io.emit("receive", color);: TÃ¼m baÄŸlantÄ±lara (istemcilere) "receive" olayÄ± ile yeni renk bilgisi gÃ¶nderiliyor. Yani istemciler, "receive" olayÄ±nÄ± dinlediklerinde, gÃ¼ncellenen renk bilgisini alacaklar.
//KullanÄ±cÄ± AyrÄ±ldÄ±ÄŸÄ±nda: socket.on("disconnect", ...) kodu, bir kullanÄ±cÄ± baÄŸlantÄ±sÄ±nÄ±n kesildiÄŸinde Ã§alÄ±ÅŸan kod bloÄŸunu tanÄ±mlar. KullanÄ±cÄ± ayrÄ±ldÄ±ÄŸÄ±nda "Bir kullanÄ±cÄ± ayrÄ±ldÄ±." mesajÄ± yazdÄ±rÄ±lÄ±r.
http.listen(3001, () => console.log("Server is up ğŸš€ ğŸš€"));
//Sunucu BaÅŸlatÄ±lÄ±yor: Son olarak, http.listen(3001, ...) kodu ile sunucu belirtilen port numarasÄ±nda dinlemeye baÅŸlÄ±yor. "Server is up ğŸš€ ğŸš€" mesajÄ±yla sunucunun baÅŸladÄ±ÄŸÄ±na dair bir mesaj gÃ¶rÃ¼ntÃ¼leniyor.